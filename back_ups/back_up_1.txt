#include "../Inc/Render.hpp"

Render::Render()
{
    return ;
}

Render::~Render()
{
    return ;
}

void Render::init()
{
    //glfwSetErrorCallback(OnError);

    if( !glfwInit() )
    {
        std::cout << "Bad news1" << std::endl;
        exit(1);
    }

    // open a window with GLFW, sets required GLFW options
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

    this->window = glfwCreateWindow( SCREEN_WIDTH, SCREEN_HEIGHT, "render", nullptr, nullptr ); //Create GLFW window

    if ( !this->window ) // Check if window was created
    {
        std::cout << "Bad news2" << std::endl;
        glfwTerminate(); // Terminate GLFW
        exit(2);
    }

    int screenwidth, screenheight;
    glfwMakeContextCurrent( this->window ); // Make the windows context current
    glfwGetFramebufferSize( window, &screenwidth, &screenheight );

    glewExperimental = GL_TRUE; //stops glew crashing on OSX :-/
    if( glewInit() != GLEW_OK )
    {
        std::cout << "Bad news 3" << std::endl;
        exit(3);
    }

    std::cout << "Im Here" << std::endl;

    this->shader.compile_shaders("/home/kchetty/Desktop/tutorial/Renderer/Shaders/Colour_Shading.vert", "/home/kchetty/Desktop/tutorial/Renderer/Shaders/Colour_Shasiner.frag");

    glViewport( 0.0f, 0.0f, SCREEN_WIDTH, SCREEN_HEIGHT ); // specifies the part of the window to which OpenGL will draw (in pixels), convert from normalized to pixels.
}

void Render::render()
{
    glEnable( GL_BLEND );
    glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );

    GLfloat tmp[] =
    {
        0.5f, 0.5f, 0.0f, 1.0f, 1.0,
        0.5f, -0.5f, 0.0f, 1.0f, 0.0f,
        -0.5f, -0.5f, 0.0f, 0.0f, 0.0f,
        -0.5f, 0.5f, 0.0f, 0.0f, 1.0f
    };

    GLuint indices[] =
    {
        0, 1, 3, // triangle one
        1, 2, 3 // triangle two
    };

    GLuint VBO = 0, VAO = 0, EBO = 0;
    glGenVertexArrays( 1, &VAO ); // Generates a Vertex Array Object
    glGenBuffers( 1, &VBO ); // Generates a VBO Buffer
    glGenBuffers( 1, &EBO ); // Generates a EBO Buffer

    std::cout << "VBO " << VBO << " VAO " << VAO << " EBO " << EBO << std::endl;

    // Binds VAO Vertex Array
    glBindVertexArray( VAO );

    //binds VBO
    glBindBuffer( GL_ARRAY_BUFFER, VBO );
    //Copies Vertex data into VBO Bound Memory
    glBufferData( GL_ARRAY_BUFFER, sizeof( tmp ), tmp, GL_STATIC_DRAW );

    // binds EBO
    glBindBuffer( GL_ELEMENT_ARRAY_BUFFER, EBO );
    //Copies Indicies data into EBO bound memory
    glBufferData( GL_ELEMENT_ARRAY_BUFFER, sizeof( indices ), indices, GL_STATIC_DRAW );

    glVertexAttribPointer( 0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof( GLfloat ), ( GLvoid *) 0 );
    glEnableVertexAttribArray( 0 );

    glVertexAttribPointer( 1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof( GLfloat ), ( GLvoid *)( 3 * sizeof(GLfloat) ) );
    glEnableVertexAttribArray( 1 );

    glBindBuffer( GL_ARRAY_BUFFER, 0);
    glBindVertexArray( 0 );

    GLuint texture;

    int width, height;
    glGenTextures(1, &texture);
    glBindTexture( GL_TEXTURE_2D, texture);

    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

    unsigned char *image = SOIL_load_image("/home/kchetty/Desktop/tutorial/Renderer/Textures/wildtextures-creased-gilded-decorative-paper-texture.jpg", &width, &height, 0, SOIL_LOAD_RGBA);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image);
    glGenerateMipmap( GL_TEXTURE_2D );
    SOIL_free_image_data( image );
    glBindTexture( GL_TEXTURE_2D, 0);

    std::cout << "Im Here" << std::endl;
    while ( !glfwWindowShouldClose( this->window ) ) // loop until user closes the window
    {
        glClear( GL_COLOR_BUFFER_BIT ); //

        glUseProgram( shader.GetProgramID() );

        glm::mat4 transform;
        transform = glm::translate( transform, glm::vec3( 0.0f, 0.0f, 0.0f));
        transform = glm::rotate( transform, ( GLfloat )glfwGetTime() * -0.5f, glm::vec3( 0.0f, 0.0f, 1.0f) );

        GLint trans = glGetUniformLocation( shader.GetProgramID(), "transform");
        glUniformMatrix4fv( trans, 1, GL_FALSE, glm::value_ptr( transform ) );

        glActiveTexture( GL_TEXTURE0 );
        glBindTexture(GL_TEXTURE_2D, texture);
        glUniform1i( glGetUniformLocation(shader.GetProgramID(), "OurText"), 0 );

        glBindVertexArray( VAO );
        glDrawElements( GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
        glBindVertexArray( 0 );

        glfwSwapBuffers( this->window ); // swap front and back buffers

        glfwPollEvents( ); // poll for and process events
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers( 1, &VBO );
    glDeleteBuffers( 1, &EBO );

    glfwTerminate();
}
